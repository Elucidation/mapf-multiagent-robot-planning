apiVersion: apps/v1
kind: Deployment
metadata:
  name: automated-warehouse
  labels:
    app: mapf
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mapf
  template:
    metadata:
      labels:
        app: mapf
    spec:
      hostname: automated-warehouse-pod
      # subdomain: redis-service
      initContainers:
      - name: setup-vol1-container
        command: ["/bin/sh","-c"]
        args: ["[ -d mapf ] && exit 0; apk add git && git clone https://github.com/Elucidation/mapf-multiagent-robot-planning/ mapf"]
        image: alpine
        workingDir: /home/app/
        volumeMounts:
        - mountPath: /home/app
          name: vol1
      containers:
        # Redis DB
        - name: redis-db
          args:
            - redis-server
            - --save
            - "60"
            - "1"
            - --loglevel
            - warning
          image: redis:alpine
          ports:
            - containerPort: 6379
              name: redis
          volumeMounts:
            - name: redis-vol
              mountPath: /data
          resources:
            requests:
              cpu: "0.1"
              memory: "100Mi"
        # World Sim
        - name: world-sim
          workingDir: /home/app/mapf/dev
          args:
            - python
            - -m
            - world_sim
            # - reset  # resets world
          image: elucidation/aw_base:latest
          volumeMounts:
            - name: vol1
              mountPath: /home/app
          resources:
            requests:
              cpu: "0.1"
              memory: "100Mi"
        # Order Processor
        - name: order-processor
          workingDir: /home/app/mapf/dev
          args:
            - python
            - -m
            - inventory_management_system.order_processor
            # - reset  # resets order db
          image: elucidation/aw_base:latest
          resources:
            requests:
              cpu: "0.1"
              memory: "100Mi"
          volumeMounts:
            - name: vol1
              mountPath: /home/app
        # Robot Allocator
        - name: robot-allocator
          workingDir: /home/app/mapf/dev
          args:
            - python
            - -m
            - robot_allocator
          image: elucidation/aw_base:latest
          volumeMounts:
            - name: vol1
              mountPath: /home/app
          resources:
            requests:
              cpu: "0.5"
              memory: "500Mi"
        # Fake Order Sender
        - name: fake-order-sender
          workingDir: /home/app/mapf/dev
          command: ["/bin/sh","-c"]
          args: ["python -m inventory_management_system.fake_order_sender -k 10 --max-item-id 47 -d 10"]
          image: elucidation/aw_base:latest
          resources:
            requests:
              cpu: "0.1"
              memory: "100Mi"
          volumeMounts:
            - name: vol1
              mountPath: /home/app
        # Node web UI
        - name: web-node
          workingDir: /home/app/mapf/dev
          args:
            - /bin/sh
            - -c
            - npm --prefix ./env_visualizer install && node env_visualizer/
          image: node:alpine
          ports:
            - containerPort: 3000
          env:
            - name: PORT # socket io port
              value: "30001"
          volumeMounts:
            - name: vol1
              mountPath: /home/app
          resources:
            requests:
              cpu: "0.1"
              memory: "100Mi"
      restartPolicy: Always
      volumes:
        - name: vol1 # Assumes /home/app/mapf has git dir
          persistentVolumeClaim:
            claimName: vol1-claim
        - name: redis-vol
          persistentVolumeClaim:
            claimName: redis-vol-claim
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: mapf
  clusterIP: None
  ports:
    - name: redis
      protocol: TCP
      port: 6379
      targetPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: web-node-service
spec:
  selector:
    app: mapf
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 30001
      nodePort: 30001
  type: NodePort