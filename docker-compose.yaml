version: "3.8"
services:
  # World Simulator
  world-sim:
    image: aw_base
    volumes:
      - vol1:/home/app
    networks:
      - aw-net
    working_dir: /home/app/mapf-multiagent-robot-planning/dev
    environment:
      - WORLD_DB_PATH=world.db
      - REDIS_HOST=redis-db
    depends_on:
      - redis-db # To publish world_t messages
    command: python -m world_sim reset
  # Robot Allocator
  robot-allocator:
    image: aw_base
    volumes:
      - vol1:/home/app
    networks:
      - aw-net
    working_dir: /home/app/mapf-multiagent-robot-planning/dev
    environment:
      - WORLD_DB_PATH=world.db
      - REDIS_HOST=redis-db
    depends_on:
      - order-processor # To set up tasks etc.
      - redis-db # subscribe to world_t, pull/process tasks
    command: python -m robot_allocator
  # Order Processor
  order-processor:
    image: aw_base
    volumes:
      - vol1:/home/app
    networks:
      - aw-net
    working_dir: /home/app/mapf-multiagent-robot-planning/dev
    environment:
      - REDIS_HOST=redis-db
    depends_on:
      - redis-db # Manage Orders/Stations/Tasks
    command: python -m inventory_management_system.order_processor reset
  # Node Web Server
  web-node:
    image: node:alpine
    volumes:
      - vol1:/home/app
    networks:
      - aw-net
    working_dir: /home/app/mapf-multiagent-robot-planning/dev
    ports:
      - 3000:3000
    environment:
      - WORLD_DB_PATH=world.db
      - REDIS_HOST=redis-db
    depends_on:
      - redis-db # To subscribe to world_t messages
    command: /bin/sh -c "npm --prefix ./env_visualizer install && node env_visualizer/"
  # Redis DB
  redis-db:
    image: redis:alpine
    networks:
      - aw-net
    volumes:
      - redis-vol:/data
    ports:
      - 6379:6379
    command: redis-server --save 60 1 --loglevel warning

volumes:
  # Requires a pre-existing volume with the base dir pointing to this cloned git repo
  vol1:
    external: true
  redis-vol:
    external: true

networks:
  aw-net: